
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 02 20:04:40 EST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 02 20:04:40 EST 2018
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\011\007\000\002\030\010\000" +
    "\002\034\006\000\002\026\006\000\002\026\005\000\002" +
    "\026\003\000\002\032\006\000\002\031\006\000\002\016" +
    "\012\000\002\027\010\000\002\012\006\000\002\017\010" +
    "\000\002\014\006\000\002\015\006\000\002\020\005\000" +
    "\002\021\005\000\002\024\005\000\002\022\004\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\010" +
    "\003\000\002\010\003\000\002\007\005\000\002\007\003" +
    "\000\002\006\011\000\002\006\011\000\002\006\005\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\037\003\000\002\053\002\000\002\037\005\000\002\040" +
    "\005\000\002\040\003\000\002\041\005\000\002\041\003" +
    "\000\002\042\004\000\002\042\003\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\054\002\000\002\043\007\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\003\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\003\000\002" +
    "\047\004\000\002\047\003\000\002\050\005\000\002\050" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\005" +
    "\000\002\051\003\000\002\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\020\030\005\045\023\053\025\056\024\057" +
    "\020\065\010\073\007\001\002\000\004\046\uffcd\001\002" +
    "\000\002\001\002\000\004\014\270\001\002\000\006\012" +
    "\142\013\uffd5\001\002\000\006\030\005\045\023\001\002" +
    "\000\004\002\257\001\002\000\042\002\uffca\005\uffca\007" +
    "\uffca\012\uffca\014\uffca\030\uffca\031\255\032\uffca\045\uffca" +
    "\053\uffca\056\uffca\057\uffca\065\uffca\066\uffca\067\uffca\073" +
    "\uffca\001\002\000\040\002\uffce\005\uffce\007\uffce\012\uffce" +
    "\014\uffce\030\uffce\032\253\045\uffce\053\uffce\056\uffce\057" +
    "\uffce\065\uffce\066\uffce\067\uffce\073\uffce\001\002\000\022" +
    "\002\ufffb\030\ufffb\045\ufffb\053\ufffb\056\ufffb\057\ufffb\065" +
    "\ufffb\073\ufffb\001\002\000\022\002\ufff8\030\ufff8\045\ufff8" +
    "\053\ufff8\056\ufff8\057\ufff8\065\ufff8\073\ufff8\001\002\000" +
    "\022\002\ufffa\030\ufffa\045\ufffa\053\ufffa\056\ufffa\057\ufffa" +
    "\065\ufffa\073\ufffa\001\002\000\042\002\uffc8\005\uffc8\007" +
    "\uffc8\012\uffc8\014\uffc8\030\uffc8\031\uffc8\032\uffc8\045\uffc8" +
    "\053\uffc8\056\uffc8\057\uffc8\065\uffc8\066\uffc8\067\uffc8\073" +
    "\uffc8\001\002\000\004\073\250\001\002\000\004\013\245" +
    "\001\002\000\022\002\ufffc\030\ufffc\045\ufffc\053\ufffc\056" +
    "\ufffc\057\ufffc\065\ufffc\073\ufffc\001\002\000\004\004\242" +
    "\001\002\000\004\006\224\001\002\000\006\004\210\073" +
    "\141\001\002\000\056\002\uffc6\005\uffc6\007\uffc6\012\uffc6" +
    "\014\uffc6\030\uffc6\031\uffc6\032\uffc6\033\035\034\040\035" +
    "\036\036\033\037\034\040\037\045\uffc6\053\uffc6\056\uffc6" +
    "\057\uffc6\065\uffc6\066\uffc6\067\uffc6\073\uffc6\001\002\000" +
    "\022\002\ufffe\030\ufffe\045\ufffe\053\ufffe\056\ufffe\057\ufffe" +
    "\065\ufffe\073\ufffe\001\002\000\022\002\ufff9\030\ufff9\045" +
    "\ufff9\053\ufff9\056\ufff9\057\ufff9\065\ufff9\073\ufff9\001\002" +
    "\000\022\002\001\030\005\045\023\053\025\056\024\057" +
    "\020\065\010\073\007\001\002\000\022\002\uffff\030\uffff" +
    "\045\uffff\053\uffff\056\uffff\057\uffff\065\uffff\073\uffff\001" +
    "\002\000\130\002\uffac\004\057\005\uffac\006\060\007\uffac" +
    "\012\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\042\070\043\063\044\064\045\uffac\047\042\050\101" +
    "\051\047\052\045\053\uffac\054\051\055\041\056\uffac\057" +
    "\uffac\065\uffac\066\uffac\067\uffac\072\075\073\053\001\002" +
    "\000\130\002\uffac\004\057\005\uffac\006\060\007\uffac\012" +
    "\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\042\070\043\063\044\064\045\uffac\047\042\050\101\051" +
    "\047\052\045\053\uffac\054\051\055\041\056\uffac\057\uffac" +
    "\065\uffac\066\uffac\067\uffac\072\075\073\053\001\002\000" +
    "\130\002\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\070\043\063\044\064\045\uffac\047\042\050\101\051\047" +
    "\052\045\053\uffac\054\051\055\041\056\uffac\057\uffac\065" +
    "\uffac\066\uffac\067\uffac\072\075\073\053\001\002\000\130" +
    "\002\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac\014" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\070" +
    "\043\063\044\064\045\uffac\047\042\050\101\051\047\052" +
    "\045\053\uffac\054\051\055\041\056\uffac\057\uffac\065\uffac" +
    "\066\uffac\067\uffac\072\075\073\053\001\002\000\130\002" +
    "\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac\014\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\025" +
    "\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\070\043" +
    "\063\044\064\045\uffac\047\042\050\101\051\047\052\045" +
    "\053\uffac\054\051\055\041\056\uffac\057\uffac\065\uffac\066" +
    "\uffac\067\uffac\072\075\073\053\001\002\000\130\002\uffac" +
    "\004\057\005\uffac\006\060\007\uffac\012\uffac\014\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac" +
    "\026\uffac\027\044\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\070\043\063" +
    "\044\064\045\uffac\047\042\050\101\051\047\052\045\053" +
    "\uffac\054\051\055\041\056\uffac\057\uffac\065\uffac\066\uffac" +
    "\067\uffac\072\075\073\053\001\002\000\004\004\175\001" +
    "\002\000\004\004\173\001\002\000\130\002\uffad\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\012\uffad\014\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\065\uffad\066\uffad\067\uffad" +
    "\072\uffad\073\uffad\001\002\000\130\002\uffac\004\057\005" +
    "\uffac\006\060\007\uffac\012\uffac\014\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\042\070\043\063\044\064\045" +
    "\uffac\047\042\050\101\051\047\052\045\053\uffac\054\051" +
    "\055\041\056\uffac\057\uffac\065\uffac\066\uffac\067\uffac\072" +
    "\075\073\053\001\002\000\004\004\163\001\002\000\130" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\072\ufff6\073\ufff6\001\002\000\004\004" +
    "\160\001\002\000\130\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\012\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\065\uffb5\066\uffb5\067\uffb5\072\uffb5\073\uffb5" +
    "\001\002\000\004\004\153\001\002\000\130\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\012\uffee\014\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\065\uffee\066\uffee\067" +
    "\uffee\072\uffee\073\uffee\001\002\000\130\002\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\012\uffaf\014\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\072\uffaf\073\uffaf\001\002\000\130\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\012\ufff5\014\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\065\ufff5\066\ufff5\067\ufff5\072" +
    "\ufff5\073\ufff5\001\002\000\062\002\uffc5\005\uffc5\007\uffc5" +
    "\012\uffc5\014\uffc5\025\147\026\150\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\045\uffc5\053\uffc5\056\uffc5\057\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\073\uffc5\001\002\000\130\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\065\ufff4\066\ufff4\067\ufff4\072\ufff4" +
    "\073\ufff4\001\002\000\006\030\005\045\023\001\002\000" +
    "\006\007\uffac\073\141\001\002\000\130\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\012\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\073\uffe8\001\002\000\130\002\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\012\uffb3\014\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\065\uffb3\066\uffb3\067\uffb3\072" +
    "\uffb3\073\uffb3\001\002\000\004\004\133\001\002\000\004" +
    "\004\130\001\002\000\130\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\012\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\065\ufff7\066\ufff7\067\ufff7\072\ufff7\073" +
    "\ufff7\001\002\000\130\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\126\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\065\uffb1\066\uffb1\067\uffb1\072\uffb1\073\uffb1" +
    "\001\002\000\130\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\012\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\065\ufff2\066\ufff2\067\ufff2\072\ufff2\073\ufff2\001" +
    "\002\000\004\004\123\001\002\000\130\002\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\012\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\020\110\021\111\022\107\023\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\072\uffb9\073\uffb9\001\002\000\004\004\116\001\002\000" +
    "\130\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\012\ufff0" +
    "\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\072\ufff0\073\ufff0\001\002\000\130" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef\014" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\065\uffef" +
    "\066\uffef\067\uffef\072\uffef\073\uffef\001\002\000\130\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\012\uffb0\014\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\072\uffb0\073\uffb0\001\002\000\130\002\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\014\uffbc\016" +
    "\104\017\105\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\072\uffbc\073\uffbc\001\002\000\130\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\012\ufff3\014\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\072\ufff3\073\ufff3\001\002\000\130\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\012\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\072\ufff1\073\ufff1\001\002\000\004\004\102\001\002\000" +
    "\004\005\103\001\002\000\130\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\012\uffde\014\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\065\uffde\066\uffde\067\uffde\072\uffde" +
    "\073\uffde\001\002\000\130\002\uffac\004\057\005\uffac\006" +
    "\060\007\uffac\012\uffac\014\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\044\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\042\070\043\063\044\064\045\uffac\047" +
    "\042\050\101\051\047\052\045\053\uffac\054\051\055\041" +
    "\056\uffac\057\uffac\065\uffac\066\uffac\067\uffac\072\075\073" +
    "\053\001\002\000\130\002\uffac\004\057\005\uffac\006\060" +
    "\007\uffac\012\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\044\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\042\070\043\063\044\064\045\uffac\047\042" +
    "\050\101\051\047\052\045\053\uffac\054\051\055\041\056" +
    "\uffac\057\uffac\065\uffac\066\uffac\067\uffac\072\075\073\053" +
    "\001\002\000\130\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\012\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\065\uffba\066\uffba\067\uffba\072\uffba\073\uffba\001" +
    "\002\000\130\002\uffac\004\057\005\uffac\006\060\007\uffac" +
    "\012\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\042\070\043\063\044\064\045\uffac\047\042\050\101" +
    "\051\047\052\045\053\uffac\054\051\055\041\056\uffac\057" +
    "\uffac\065\uffac\066\uffac\067\uffac\072\075\073\053\001\002" +
    "\000\130\002\uffac\004\057\005\uffac\006\060\007\uffac\012" +
    "\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\042\070\043\063\044\064\045\uffac\047\042\050\101\051" +
    "\047\052\045\053\uffac\054\051\055\041\056\uffac\057\uffac" +
    "\065\uffac\066\uffac\067\uffac\072\075\073\053\001\002\000" +
    "\130\002\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\070\043\063\044\064\045\uffac\047\042\050\101\051\047" +
    "\052\045\053\uffac\054\051\055\041\056\uffac\057\uffac\065" +
    "\uffac\066\uffac\067\uffac\072\075\073\053\001\002\000\130" +
    "\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7\014" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\072\uffb7\073\uffb7\001\002\000\130\002" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\012\uffb8\014\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\072\uffb8\073\uffb8\001\002\000\130\002\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\014\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\072\uffb6\073\uffb6\001\002\000\130\002\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\012\uffbb\014\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\072\uffbb\073\uffbb\001\002\000\006\030\005\045\023" +
    "\001\002\000\004\012\120\001\002\000\006\030\005\045" +
    "\023\001\002\000\004\005\122\001\002\000\130\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\012\uffec\014\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\065\uffec\066\uffec" +
    "\067\uffec\072\uffec\073\uffec\001\002\000\006\030\005\045" +
    "\023\001\002\000\004\005\125\001\002\000\130\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\012\uffeb\014\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\072\uffeb\073\uffeb\001\002\000\130\002\uffac\004" +
    "\057\005\uffac\006\060\007\uffac\012\uffac\014\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\042\070\043\063\044" +
    "\064\045\uffac\047\042\050\101\051\047\052\045\053\uffac" +
    "\054\051\055\041\056\uffac\057\uffac\065\uffac\066\uffac\067" +
    "\uffac\072\075\073\053\001\002\000\130\002\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\012\uffb2\014\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\072\uffb2\073\uffb2\001\002\000\006\030\005\045\023\001" +
    "\002\000\004\005\132\001\002\000\130\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\072\uffe6\073\uffe6\001\002\000\006\030\005\045\023\001" +
    "\002\000\004\005\135\001\002\000\130\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\012\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\072\uffe7\073\uffe7\001\002\000\006\005\uffd8\007\uffd8\001" +
    "\002\000\006\005\uffd7\007\uffd7\001\002\000\004\007\144" +
    "\001\002\000\014\005\uffd5\007\uffd5\012\142\013\uffd5\015" +
    "\uffd5\001\002\000\004\073\141\001\002\000\012\005\uffd6" +
    "\007\uffd6\013\uffd6\015\uffd6\001\002\000\130\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\014\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\072\uffe9\073\uffe9\001\002\000\004\005\146\001\002" +
    "\000\130\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\012" +
    "\uffae\014\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\065\uffae\066\uffae\067\uffae\072\uffae\073\uffae\001\002\000" +
    "\130\002\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042" +
    "\070\043\063\044\064\045\uffac\047\042\050\101\051\047" +
    "\052\045\053\uffac\054\051\055\041\056\uffac\057\uffac\065" +
    "\uffac\066\uffac\067\uffac\072\075\073\053\001\002\000\130" +
    "\002\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac\014" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\025\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\070" +
    "\043\063\044\064\045\uffac\047\042\050\101\051\047\052" +
    "\045\053\uffac\054\051\055\041\056\uffac\057\uffac\065\uffac" +
    "\066\uffac\067\uffac\072\075\073\053\001\002\000\130\002" +
    "\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\012\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\072\uffbd\073\uffbd\001\002\000\130\002\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\072\uffbe\073\uffbe\001\002\000\004\053\025\001" +
    "\002\000\004\012\155\001\002\000\004\073\141\001\002" +
    "\000\004\005\157\001\002\000\130\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\065\uffe4\066\uffe4\067\uffe4\072" +
    "\uffe4\073\uffe4\001\002\000\006\005\uffac\073\141\001\002" +
    "\000\004\005\162\001\002\000\130\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\012\uffea\014\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\065\uffea\066\uffea\067\uffea\072" +
    "\uffea\073\uffea\001\002\000\006\030\005\045\023\001\002" +
    "\000\004\012\165\001\002\000\006\030\005\045\023\001" +
    "\002\000\004\012\167\001\002\000\006\030\005\045\023" +
    "\001\002\000\004\005\171\001\002\000\130\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\072\uffe5\073\uffe5\001\002\000\130\002\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\012\uffb4\014\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\072\uffb4\073\uffb4\001\002\000\004\005\174\001\002\000" +
    "\130\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf" +
    "\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\072\uffdf\073\uffdf\001\002\000\006" +
    "\030\005\045\023\001\002\000\004\005\177\001\002\000" +
    "\130\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3" +
    "\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\001\002\000\130" +
    "\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\012\uffc0\014" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\025\147\026\150\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\072\uffc0\073\uffc0\001\002\000\130\002" +
    "\uffac\004\057\005\uffac\006\060\007\uffac\012\uffac\014\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\025" +
    "\uffac\026\uffac\027\044\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\070\043" +
    "\063\044\064\045\uffac\047\042\050\101\051\047\052\045" +
    "\053\uffac\054\051\055\041\056\uffac\057\uffac\065\uffac\066" +
    "\uffac\067\uffac\072\075\073\053\001\002\000\062\002\uffbf" +
    "\005\uffbf\007\uffbf\012\uffbf\014\uffbf\025\147\026\150\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\045\uffbf\053\uffbf\056\uffbf\057\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\073\uffbf\001\002\000\062\002\uffc4" +
    "\005\uffc4\007\uffc4\012\uffc4\014\uffc4\025\147\026\150\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\045\uffc4\053\uffc4\056\uffc4\057\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\073\uffc4\001\002\000\062\002\uffc3" +
    "\005\uffc3\007\uffc3\012\uffc3\014\uffc3\025\147\026\150\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\045\uffc3\053\uffc3\056\uffc3\057\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\073\uffc3\001\002\000\062\002\uffc2" +
    "\005\uffc2\007\uffc2\012\uffc2\014\uffc2\025\147\026\150\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\045\uffc2\053\uffc2\056\uffc2\057\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\073\uffc2\001\002\000\062\002\uffc1" +
    "\005\uffc1\007\uffc1\012\uffc1\014\uffc1\025\147\026\150\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\045\uffc1\053\uffc1\056\uffc1\057\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\073\uffc1\001\002\000\002\001\002" +
    "\000\006\006\211\073\141\001\002\000\004\073\141\001" +
    "\002\000\004\015\213\001\002\000\006\005\uffac\073\141" +
    "\001\002\000\004\005\215\001\002\000\002\001\002\000" +
    "\024\002\uffd3\012\uffd3\030\uffd3\045\uffd3\053\uffd3\056\uffd3" +
    "\057\uffd3\065\uffd3\073\uffd3\001\002\000\004\007\220\001" +
    "\002\000\004\005\221\001\002\000\002\001\002\000\024" +
    "\002\uffd4\012\uffd4\030\uffd4\045\uffd4\053\uffd4\056\uffd4\057" +
    "\uffd4\065\uffd4\073\uffd4\001\002\000\024\002\uffd2\012\uffd2" +
    "\030\uffd2\045\uffd2\053\uffd2\056\uffd2\057\uffd2\065\uffd2\073" +
    "\uffd2\001\002\000\006\007\uffac\073\227\001\002\000\004" +
    "\007\uffdb\001\002\000\006\007\uffac\012\235\001\002\000" +
    "\004\024\233\001\002\000\004\007\231\001\002\000\020" +
    "\030\005\045\023\053\025\056\024\057\020\065\010\073" +
    "\007\001\002\000\022\002\uffed\030\005\045\023\053\025" +
    "\056\024\057\020\065\010\073\007\001\002\000\006\030" +
    "\005\045\023\001\002\000\006\007\uffdd\012\uffdd\001\002" +
    "\000\004\073\227\001\002\000\004\007\uffd9\001\002\000" +
    "\004\007\uffdc\001\002\000\006\007\uffac\012\235\001\002" +
    "\000\004\007\uffda\001\002\000\002\001\002\000\004\005" +
    "\244\001\002\000\004\046\uffe1\001\002\000\004\024\246" +
    "\001\002\000\006\030\005\045\023\001\002\000\004\014" +
    "\uffcf\001\002\000\004\024\251\001\002\000\006\030\005" +
    "\045\023\001\002\000\004\014\uffd1\001\002\000\004\030" +
    "\005\001\002\000\042\002\uffcb\005\uffcb\007\uffcb\012\uffcb" +
    "\014\uffcb\030\uffcb\031\255\032\uffcb\045\uffcb\053\uffcb\056" +
    "\uffcb\057\uffcb\065\uffcb\066\uffcb\067\uffcb\073\uffcb\001\002" +
    "\000\004\030\005\001\002\000\042\002\uffc9\005\uffc9\007" +
    "\uffc9\012\uffc9\014\uffc9\030\uffc9\031\uffc9\032\uffc9\045\uffc9" +
    "\053\uffc9\056\uffc9\057\uffc9\065\uffc9\066\uffc9\067\uffc9\073" +
    "\uffc9\001\002\000\004\002\000\001\002\000\004\066\261" +
    "\001\002\000\006\030\005\045\023\001\002\000\004\067" +
    "\263\001\002\000\006\030\005\045\023\001\002\000\022" +
    "\002\uffe2\030\uffe2\045\uffe2\053\uffe2\056\uffe2\057\uffe2\065" +
    "\uffe2\073\uffe2\001\002\000\004\024\266\001\002\000\006" +
    "\030\005\045\023\001\002\000\004\014\uffd0\001\002\000" +
    "\022\002\ufffd\030\ufffd\045\ufffd\053\ufffd\056\ufffd\057\ufffd" +
    "\065\ufffd\073\ufffd\001\002\000\056\002\uffc7\005\uffc7\007" +
    "\uffc7\012\uffc7\014\uffc7\030\uffc7\031\uffc7\032\uffc7\033\035" +
    "\034\040\035\036\036\033\037\034\040\037\045\uffc7\053" +
    "\uffc7\056\uffc7\057\uffc7\065\uffc7\066\uffc7\067\uffc7\073\uffc7" +
    "\001\002\000\004\046\274\001\002\000\036\002\uffcc\005" +
    "\uffcc\007\uffcc\012\uffcc\014\uffcc\030\uffcc\045\uffcc\053\uffcc" +
    "\056\uffcc\057\uffcc\065\uffcc\066\uffcc\067\uffcc\073\uffcc\001" +
    "\002\000\004\004\275\001\002\000\002\001\002\000\004" +
    "\005\277\001\002\000\036\002\uffe0\005\uffe0\007\uffe0\012" +
    "\uffe0\014\uffe0\030\uffe0\045\uffe0\053\uffe0\056\uffe0\057\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\073\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\040\002\010\003\030\004\026\005\005\006" +
    "\021\007\020\011\015\014\003\017\027\036\013\037\014" +
    "\040\012\041\011\042\016\043\025\001\001\000\004\053" +
    "\271\001\001\000\004\043\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\003\037\257\040\012\041" +
    "\011\042\016\043\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\031\005" +
    "\005\006\021\007\020\011\015\014\003\017\027\036\013" +
    "\037\014\040\012\041\011\042\016\043\025\001\001\000" +
    "\002\001\001\000\050\012\072\016\066\020\073\021\051" +
    "\025\042\026\076\027\077\030\064\031\055\032\053\034" +
    "\045\035\071\044\070\045\205\046\075\047\047\050\061" +
    "\051\065\052\060\001\001\000\050\012\072\016\066\020" +
    "\073\021\051\025\042\026\076\027\077\030\064\031\055" +
    "\032\053\034\045\035\071\044\070\045\204\046\075\047" +
    "\047\050\061\051\065\052\060\001\001\000\050\012\072" +
    "\016\066\020\073\021\051\025\042\026\076\027\077\030" +
    "\064\031\055\032\053\034\045\035\071\044\070\045\203" +
    "\046\075\047\047\050\061\051\065\052\060\001\001\000" +
    "\050\012\072\016\066\020\073\021\051\025\042\026\076" +
    "\027\077\030\064\031\055\032\053\034\045\035\071\044" +
    "\070\045\202\046\075\047\047\050\061\051\065\052\060" +
    "\001\001\000\050\012\072\016\066\020\073\021\051\025" +
    "\042\026\076\027\077\030\064\031\055\032\053\034\045" +
    "\035\071\044\070\045\177\046\075\047\047\050\061\051" +
    "\065\052\060\001\001\000\050\012\072\016\066\020\073" +
    "\021\051\025\042\026\076\027\077\030\064\031\055\032" +
    "\053\034\045\035\071\044\070\045\054\046\075\047\047" +
    "\050\061\051\065\052\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\012\072\016\066" +
    "\020\073\021\051\025\042\026\076\027\077\030\064\031" +
    "\055\032\053\034\045\035\071\050\171\051\065\052\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\003\037\144\040\012\041\011" +
    "\042\016\043\025\001\001\000\010\007\135\010\137\052" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\012\072\016\066\020\073\021\051\025\042" +
    "\026\076\027\077\030\064\031\055\032\053\034\045\035" +
    "\071\044\114\047\047\050\061\051\065\052\060\001\001" +
    "\000\044\012\072\016\066\020\073\021\051\025\042\026" +
    "\076\027\077\030\064\031\055\032\053\034\045\035\071" +
    "\044\105\047\047\050\061\051\065\052\060\001\001\000" +
    "\002\001\001\000\042\012\072\016\066\020\073\021\051" +
    "\025\042\026\076\027\077\030\064\031\055\032\053\034" +
    "\045\035\071\047\113\050\061\051\065\052\060\001\001" +
    "\000\042\012\072\016\066\020\073\021\051\025\042\026" +
    "\076\027\077\030\064\031\055\032\053\034\045\035\071" +
    "\047\112\050\061\051\065\052\060\001\001\000\042\012" +
    "\072\016\066\020\073\021\051\025\042\026\076\027\077" +
    "\030\064\031\055\032\053\034\045\035\071\047\111\050" +
    "\061\051\065\052\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\003\037\116\040\012\041\011\042\016\043\025\001\001" +
    "\000\002\001\001\000\016\014\003\037\120\040\012\041" +
    "\011\042\016\043\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\003\037\123\040\012\041\011\042" +
    "\016\043\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\012\072\016\066\020\073\021\051\025\042\026" +
    "\076\027\077\030\064\031\055\032\053\034\045\035\071" +
    "\050\126\051\065\052\060\001\001\000\002\001\001\000" +
    "\016\014\003\037\130\040\012\041\011\042\016\043\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\003\037\133\040\012\041\011\042\016\043\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\012\072\016\066" +
    "\020\073\021\051\025\042\026\076\027\077\030\064\031" +
    "\055\032\053\034\045\035\071\044\151\047\047\050\061" +
    "\051\065\052\060\001\001\000\044\012\072\016\066\020" +
    "\073\021\051\025\042\026\076\027\077\030\064\031\055" +
    "\032\053\034\045\035\071\044\150\047\047\050\061\051" +
    "\065\052\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\153\001\001\000\002\001\001\000\004\007" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\135\010\160\052\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\003\037\163\040\012\041\011" +
    "\042\016\043\025\001\001\000\002\001\001\000\016\014" +
    "\003\037\165\040\012\041\011\042\016\043\025\001\001" +
    "\000\002\001\001\000\016\014\003\037\167\040\012\041" +
    "\011\042\016\043\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\003\037\175\040\012\041\011\042\016" +
    "\043\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\200\001\001\000\050\012\072\016\066\020\073" +
    "\021\051\025\042\026\076\027\077\030\064\031\055\032" +
    "\053\034\045\035\071\044\070\045\201\046\075\047\047" +
    "\050\061\051\065\052\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\222\001\001\000\004\007\211\001" +
    "\001\000\004\007\216\001\001\000\002\001\001\000\010" +
    "\007\135\010\213\052\136\001\001\000\002\001\001\000" +
    "\004\036\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\227\024\225\052\224" +
    "\001\001\000\002\001\001\000\006\023\236\052\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\231" +
    "\004\026\005\005\006\021\007\020\011\015\014\003\017" +
    "\027\036\013\037\014\040\012\041\011\042\016\043\025" +
    "\001\001\000\034\004\031\005\005\006\021\007\020\011" +
    "\015\014\003\017\027\036\013\037\014\040\012\041\011" +
    "\042\016\043\025\001\001\000\016\014\003\037\233\040" +
    "\012\041\011\042\016\043\025\001\001\000\002\001\001" +
    "\000\004\024\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\240\052\235\001\001\000\002\001\001" +
    "\000\004\013\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\003\037\246\040\012" +
    "\041\011\042\016\043\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\003\037\251\040\012\041\011" +
    "\042\016\043\025\001\001\000\002\001\001\000\010\041" +
    "\253\042\016\043\025\001\001\000\002\001\001\000\006" +
    "\042\255\043\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\003\037\261\040\012" +
    "\041\011\042\016\043\025\001\001\000\002\001\001\000" +
    "\016\014\003\037\263\040\012\041\011\042\016\043\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\003\037\266\040\012\041\011\042\016\043\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\275\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=b
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpPow(p,f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitnot",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBitNot() 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitnot",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithexp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arithexp ::= arithexp MINUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(a, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithexp ::= arithexp PLUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(a, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bitexp ::= arithexp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bitexp ::= bitexp BOR term 
            {
              Exp RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpBitOr(bi, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bitexp ::= bitexp BAND term 
            {
              Exp RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpBitAnd(bi, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relexp ::= relexp NOTEQUAL bitexp NT$1 bitexp 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bi; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$1 ::= 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

			RESULT = new ExpNotEqual(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relexp ::= relexp LESSEQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpLessEq(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relexp ::= relexp GREATEREQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpGreatEq(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relexp ::= relexp EQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpEqual(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relexp ::= relexp LESSTHAN bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpLess(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relexp ::= relexp GREATERTHAN bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpGreater(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logicnot ::= relexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicnot",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logicnot ::= not relexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicNot(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicnot",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logicand ::= logicnot 
            {
              Exp RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ln = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ln; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicand",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logicand ::= logicand and logicnot 
            {
              Exp RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ln = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicAnd(la,ln); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicand",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logicor ::= logicand 
            {
              Exp RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = la; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicor",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logicor ::= logicor or logicand 
            {
              Exp RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicOr(lo,la); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicor",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= print NT$0 println 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=p;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$0 ::= 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
RESULT=p;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= logicor 
            {
              Exp RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = lo; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // definition ::= idList COLON ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // definition ::= VARIABLE COLON ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // definition ::= DEF VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procDefn ::= PROC idList valStmt 
            {
              StmtDefinition RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procDefn ::= PROC LPAREN idList PERIOD idListE RPAREN valStmt 
            {
              StmtDefinition RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procDefn ::= PROC LPAREN LBRACE idList RBRACE RPAREN valStmt 
            {
              StmtDefinition RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // idList ::= VARIABLE 
            {
              ArrayList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // idList ::= VARIABLE COMMA idList 
            {
              ArrayList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // idListE ::= empty 
            {
              ArrayList RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // idListE ::= idList 
            {
              ArrayList RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindingsAux ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bindings ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bindings ::= binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // readint ::= READINT LPAREN RPAREN 
            {
              Statement RESULT =null;
		
		RESULT = new ExpReadInt();
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readint",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // read ::= READ LPAREN RPAREN 
            {
              Statement RESULT =null;
		
		RESULT = new ExpRead();
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // println ::= PRINTLN LPAREN stmtExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtPrintLn(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("println",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print ::= PRINT LPAREN stmtExp RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtPrint(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifStmt ::= IF expression THEN expression ELSE expression 
            {
              Statement RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		 RESULT = new StmtIf(ifExp, thenExp, elseExp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                 RESULT = new SmplLazy(e);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // call ::= CALL LPAREN procDefn COMMA idList RPAREN 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		StmtDefinition f = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new makeCall(f,lst);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpSubStr(e1, e2, e3);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list ::= empty 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list ::= LBRACE idListE RBRACE 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList id = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpList(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list ::= LIST LPAREN idListE RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList id = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpList(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairCheck",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pairStmt ::= pair LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new makePair(e1,e2);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairStmt",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // letStmt ::= LET LBRACE bindings RBRACE stmtList 
            {
              Statement RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList bs = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // builtIn ::= readint 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // builtIn ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // builtIn ::= lazy 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement l = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // builtIn ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // builtIn ::= substr 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // builtIn ::= pairStmt 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT =e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ifStmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement is = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = is; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= letStmt 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement ls = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= valStmt 
            {
              Statement RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp vs = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vs; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= procDefn 
            {
              Statement RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition SEMI 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

