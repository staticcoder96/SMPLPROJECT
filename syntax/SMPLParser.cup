import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SmplLexer lexer;

		public SmplParser(SmplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LBRACE, RBRACE, LCBRACE, RCBRACE, COMMA, COLON, SEMICOLON, PERIOD;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW, ASSIGN;

terminal BAND, BOR, BNOT;

terminal LNOT, LAND, LOR;

//comparators
terminal EQUAL, GREATERTHAN, LESSTHAN, LESSEQUAL, GREATEREQUAL, NOTEQUAL;

/* Keywords */
terminal PAIR, PAIRCHECK, CAR, CDR, PRINT, PRINTLN, READ, READINT, LIST, PROC, SUBSTR;
terminal PROC, CALL, LAZY, LET, DEF, ISEQUAL,ISEQUIVALENT,SIZE, LVECTOR, RVECTOR;
terminal IF, THEN, ELSE, CASE, CONCAT;


// terminals with values
terminal Integer INTEGER;
terminal String VARIABLE;

/* Non terminals */
non terminal SmplProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;
non terminal StmtDefinition procDefn;
non terminal ArrayList idList;
non terminal ArrayList idListE;

non terminal Statement letStmt;
non terminal Statement pairStmt;
non terminal Statement pairStmt;
non terminal Statement cdr;
non terminal Statement car;
non terminal Statement case;
non terminal Statement pairCheck;
non terminal Statement lazyStmt;
non terminal Statement printStmt;
non terminal Statement printLnStmt;
non terminal Statement callStmt;
non terminal Statement read;
non terminal Statement readint;
non terminal ArrayList bindings;
non terminal ArrayList bindingsAux;
non terminal Binding binding;

non terminal Exp valStmt;
non terminal Exp expression;
non terminal Exp logicor;
non terminal Exp logicand;
non terminal Exp logicnot;
non terminal Exp relexp;
non terminal Exp term;
non terminal Exp bitexp;
non terminal Exp arithexp;
non terminal Exp bitnot;
non terminal Exp power;
non terminal Exp factor;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new SmplProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d SEMI {: RESULT = d; :} |
     	 fnDefn |
	 valStmt:vs {: RESULT = vs; :}|
	 letStmt:ls {: RESULT = ls; :}|
	 callStmt:cs {: RESULT = cs; :}|
	 pairStmt:ps {: RESULT = ps; :}
	 callStmt:cs {: RESULT = cs; :}|
	 lazyStmt:zs {: RESULT = zs; :}|
	 ifStmt:is {: RESULT = is; :}|
	 expression:e {:RESULT =e; :};

valStmt ::= letStmt:l {: RESULT = l; :} |
	    expression:e SEMI {: RESULT = new Statement(e); :};

letStmt ::= LET LBRACE bindings:bs RBRACE stmtList:body{:
			RESULT = new StmtLet(bs, body);
		:};
		
pairStmt::= pair LPAREN expression:e1 COMMA expression e2 RPAREN {:
		RESULT = new makePair(e1,e2);	
		:};
		
pairCheck ::= PAIRCHECK LPAREN expression:e RPAREN {:
			RESULT = new ExpPairCheck(e); :};

car ::= CAR LPAREN expression:e RPAREN {:
			RESULT = new ExpCar(e); :};

cdr ::= CDR LPAREN expression:e RPAREN {:
			RESULT = new ExpCdr(e); :};

substr ::= SUBSTR LPAREN expression:e1 COMMA expression:e2 COMMA expression:e3 RPAREN {:
			RESULT = new ExpSubStr(e1, e2, e3);
		:};

callStmt::= CALL LPAREN procDefn:f COMMA idList:lst RPAREN{:
		RESULT = new makeCall(f,lst);	
		:};
		
lazyStmt::= LAZY LPAREN expression:e RPAREN{:
                 RESULT = new SmplLazy(e);	
		:};

ifStmt ::= IF expression:ifExp THEN expression:thenExp ELSE expression:elseExp {:
		 RESULT = new StmtIf(ifExp, thenExp, elseExp); :};

printStmt ::= PRINT LPAREN stmtExp:e RPAREN {: RESULT = new StmtPrint(e); :};

printlnStmt ::= PRINTLN LPAREN stmtExp:e RPAREN {: RESULT = new StmtPrintLn(e); :};
	   
read ::= READ LPAREN RPAREN {:
		RESULT = new ExpRead();
	:};

readint ::= READINT LPAREN RPAREN {:
		RESULT = new ExpReadInt();
	:};

binding ::= VARIABLE:v ASSIGN expression:e {:
		RESULT = new Binding(v, e);
	:};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

idListE ::= idList: lst |
	    empty;

idList ::= VARIABLE:id COMMA idList |
       	   VARIABLE:id;

procDefn ::= PROC LPAREN LBRACE idList:parms RBRACE RPAREN valStmt:body
       	        {: RESULT = new ExpProc(parms, body); :} |
       	     PROC LPAREN idList:parms PERIOD idListE:parms RPAREN valStmt:body
       	        {: RESULT = new ExpProc(parms, body); :} |
       	     PROC idList:parms valStmt:body
       	        {: RESULT = new ExpProc(parms, body); :} 
       	     ;

definition ::= DEF VARIABLE:v ASSIGN expression:e {:
		   RESULT = new StmtDefinition(v, e);
		:} |
		VARIABLE:v COLON ASSIGN expression:e {:
		   RESULT = new StmtDefinition(v, e);
		:} |
		idList:v COLON ASSIGN expression:e {:
		   RESULT = new StmtDefinition(v, e);
		:};

expression ::= logicor:lo{:
		RESULT = lo; :};
		
logicor ::= logicor:lo or logica:la{:
		RESULT = new ExpLogicOr(lo,la); :} |
	     logicand:la {: RESULT = la; :};
		
logicand ::= logicand:la and logicnot:ln{:
		RESULT = new ExpLogicAnd(la,ln); :} |
	     logicnot:ln {: RESULT = ln; :};		
		
logicnot ::= not relexp:r{:
		RESULT = new ExpLogicNot(r); :} |
	     relexp:r {: RESULT = r; :};

relexp ::=	relexp:r GREATERTHAN bitexp:bi{:
			RESULT = new ExpGreater(r, bi); :} |
		relexp:r LESSTHAN bitexp:bi{:
			RESULT = new ExpLess(r, bi); :} |
		relexp:r EQUAL bitexp:bi{:
			RESULT = new ExpEqual(r, bi); :} |
		relexp:r GREATEREQUAL bitexp:bi{:
			RESULT = new ExpGreatEq(r, bi); :} |
		relexp:r LESSEQUAL bitexp:bi{:
			RESULT = new ExpLessEq(r, bi); :} |
		relexp:r NOTEQUAL bitexp:bi{:
			RESULT = new ExpNotEqual(r, bi); :}
		bitexp:bi {: RESULT = bi; :};

bitexp ::= 	bitexp:bi BAND term:t {:
			RESULT = new ExpBitAnd(bi, t); :} |
		bitexp:bi BOR term:t {:
			RESULT = new ExpBitOr(bi, t); :} |
		arithexp:a {: RESULT = a; :};

arithexp ::= 	arithexp:a PLUS term:t {:
			RESULT = new ExpAdd(a, t); :} |
		arithexp:a MINUS term:t {:
			RESULT = new ExpSub(a, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL bitnot:b  {:
		RESULT = new ExpMul(t, b); :} |
	 term:t DIV bitnot:b   {:
		RESULT = new ExpDiv(t, b); :} |
	 term:t MOD bitnot:b   {:
		RESULT = new ExpMod(t, b); :} |
	 bitnot:b  {: RESULT = b; :};
	 
bitnot ::= BNOT power:p {: RESULT = new ExpBitNot() :} |
	   power:p {: RESULT = p; :};
	 
power ::= factor:f POW power:p{:
		RESULT = new ExpPow(p,f); :}|
	  factor:f {: RESULT = f; :};

factor ::= INTEGER:ilit {: RESULT = new ExpLit(ilit); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	;


empty ::= ;
